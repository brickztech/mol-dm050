The database contains daily closing stock prices for a couple of stocks, quotations for various oil industry products and crude oil, crack spreads for various refinery and petrochemical products and a helper table for easy acquisition of date-related attributes like day-of-week etc. for a large range of dates.

The database contains a table called 'stocks'. This table stores daily closing prices of stocks of regionally important oil processing enterprises.
The table 'stocks' contains a datetime-valued field called 'stdate'. This field is never null, and it contains the date for which the stock value is being cited. Although this field has a datetime type, its contents is a date (that is, the hour, minute etc. part is all zeroes).
The table 'stocks' contains a string-valued field called 'stname'. This field contains the name of the stock in question.
The table 'stocks' contains a decimal-valued field called 'stvalue'. This field may be null; if it contains a value, it is the closing price of the stock for the date stored in 'stdate', expressed in the currency stored in 'stcurrency'. If it is null, the row can be disregarded.
The table 'stocks' contains a string-valued field called 'stcurrency'. This field contains the code of the currency in which the stock price is expressed. The value of this field can currently be HUF for Hungarian forints, EUR for Euro and PLN for Polish zloty (or z≈Çoti).

The database contains a table called 'quotations'. This table contains quotations for prices of various oil industry products as well as for crude oil for given dates.
The table 'quotations' contains a date-valued field called 'qdate'. This field contains the date for the quotation represented in the row.
The table 'quotations' contains a string-valued field called 'qtype'. This field contains information about the product underlying the current quotation. Currently the following kinds of quotations are visible in the table 'quotations':
Brent or Dated Brent crude oil: the value of the 'qtype' field will start with 'dtd-brent'
Azeri Light crude oil: the 'qtpye' field will have the value 'cif-azeri-light'.
CPC or CPC Blend crude oil: the 'qtype' field will have the value 'cif-med-cpc'.
Urals crude oil: three different types of quotations are available. When 'qtype' is 'cif-med-urals', it means this is a quotation for Urals on CIF (Cost,Insurance and Freight) logistic parity in the mediterranean region. When 'qtype' is 'cif-nwe-urals', it means this is a quotation for Urals on CIF logistic parity in the north-west European reagion. When 'qtype' is 'dap-india-urals', it means this is a quotation for Urals on DAP (Delivered at Place) logistic parity in the India region. If the user asks for Urals quotations, you should clarify which one(s) are meant. 
All crude oil quotations are given as differences between absolute prices per unit and Brent prices for the same unit, currency and date.
The table 'quotations' contains a numeric-valued field called 'qprice'. This field contains the quotation value for the given product.
The table 'quotations' contains a string-valued field called 'qcurrency'. This field contains the code of the currency (like USD, EUR etc.) the quotation is expressed in. If serving the user request would involve looking up quotations, you should check that this field is not multi-valued for the subset of data pertinent to the user's request. If there's a single currency, you should state the name of the currency in a remark. If there are multiple currencies, and USD is among them, you should use the USD-denominated rows and tell the user about this fact and the other currencies. If there are multiple currencies but none of them is USD, you should ask the user for clarifications.
The table 'quotations' contains a string-valued field called 'quom'. This field contains the unit-of-measure (for instance T for tons or BBL for barrels) for which the price is given. If serving the user request would involve looking up quotations, you should check that this field is not multi-valued for the subset of data pertinent to the user's request. If there's a single unit of measure, you should state its name in a remark. IF there are multiple units of measure, you should ask the user for clarification.

The database contains a table called 'calendar'. This table stores a row for every date within every year of interest, together with important characteristics of the given date such as what day of the week it falls on, what is the number of the week it falls on, what is the quarter-year it falls in etc. All these can presumably be obtained by calculation but joining in this table on the primary key and reading the respective field is much easier.
The table 'calendar' contains a date-valued field called 'day_date_id'. This field contains the date for which the current row contains computed attributes. This is the primary key of the table.
The table 'calendar' contains an integer-valued field called 'year'. This field contains the year portion of the date, for example 2025 for the date '2025-11-21'.
The table 'calendar' contains an integer-valued field called 'month_of_year'. This field contains the ordinal number of the month of the current date, so it's 1 for January, 2 for February and so on.
The table 'calendar' contains a string-valued field called 'monthname_of_year'. This field contains the name of the month the current date is in, so it's 'January' for January, 'February' for February' etc.
The table 'calendar' contains an integer-valued field called 'quarter_of_year'. This field contains the ordinal number of the quarter-year of the current date, so it's 1 for dates within January, February or March, 2 for dates within April, May or June etc.
The table 'calendar' contains a string-valued field called 'year_quarter'. This field contains a string identification of the quarter year the current date belongs to, for example '2018-Q2' for the second quarter of 2018, '2019-Q3' for the third quarter of 2019 and so on.
The table 'calendar' contains a string-valued field called 'year_half'. This field contains a string identification of the quarter year the current date belongs to, for example '2018-H2' for the second half of 2018, '2019-H1' for the first half of 2019 and so on. There is no field that expresses the identity of the half-year numerically the way 'quarter_of_year' does for quarters; half-year must be either identified with the two quarters it encompasses or by the last digit of 'year_half'.
